/*
 * UTNBilbiotecaTomaDeDatos.c
 *
 *  Created on: 13 may 2022
 *      Author: ludmi
 */



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static int esNumerica(char* cadena);
static int getInt(int* pResultado);
static int esFlotante(char* cadena);
static int getFloat(float* pResultado);


int utn_getCaracter(char * pResultado, char* mensaje, char * mensajeError, char minimo, char maximo, int reintentos)
{
	int retorno;
	char auxiliar;
	retorno = -1;

	if (pResultado !=NULL && mensaje !=NULL && mensajeError !=NULL && minimo <= maximo && reintentos >=0){

		do {
         printf("%s",mensaje);
		scanf("%c",&auxiliar);
		 if (auxiliar >=minimo && auxiliar <=maximo)
		 {
			 *pResultado = auxiliar;
			 retorno = 0;


		 }else {
			 printf("%s", mensajeError);
			 reintentos--;
		 }
		} while(reintentos >=0);

	}//cierre if punteros


    return  retorno;

}

/// @fn int getInt(int*, char*, char*, int, int, int)
/// @brief Solicita un numero  de tipo entero  al usuario, luego de verificarlo devuelve el resultado
///
/// @param pNumeroIngresado Puntero al espacio de memoria donde se dejara el resultado de la funcion
/// @param mensaje Es el mensaje a ser mostrado
/// @param mensajeError Es el mensaje de Error a ser mostrado
/// @param maximo Es el numero maximo a ser aceptado
/// @param minimo Es el numero maximo a ser aceptado
///
/// @param maximoDeReintentos cantidad maxima de posibilidades antes de mostrar el mensaje error
/// @return  Retorna 0 si se obtuvo el numero y -1 si no
int utn_getNumero(int * pNumeroIngresado,char * mensaje,char * mensajeError,
		int maximo, int minimo, int maximoDeReintentos){

	int buffer;
	int retorno;
	retorno = -1;

	if(pNumeroIngresado != NULL && maximo >= minimo && maximoDeReintentos>= 0){
		do{
			printf("%s", mensaje);
			//scanf("%d", &auxNumeroIngresado);
			if(getInt(&buffer) == 0 && buffer >=minimo && buffer <=maximo){
			maximoDeReintentos--;

						*pNumeroIngresado = buffer;
						retorno = 0;
						break;
			}else{
				printf("%s", mensajeError);
			}

		}while(maximoDeReintentos > 0);
	}

	return retorno;
}




/**
 * \brief 	Lee de stdin hasta que encuentra un '\n' o hasta que haya copiado en cadena
 * 			un máximo de 'longitud - 1' caracteres.
 * \param pResultado Puntero al espacio de memoria donde se copiara la cadena obtenida
 * \param longitud Define el tamaño de cadena
 * \return Retorna 0 (EXITO) si se obtiene una cadena y -1 (ERROR) si no
 *
 */
int myGets(char* cadena, int longitud)
{

	fflush(stdin);
	fgets(cadena,longitud,stdin);
    cadena[strlen(cadena)-1]='\0';

	return -1;
}

/**
 * \brief Verifica si la cadena ingresada es numerica
 * \param pResultado Puntero al espacio de memoria donde se dejara el resultado de la funcion
 * \return Retorna 0 (EXITO) si se obtiene un numero entero y -1 (ERROR) si no
 *
 */
static int getInt (int*pResultado)
{
    int retorno=-1;
    char buffer[4050];
    myGets(buffer,sizeof(buffer));


    scanf("%s",buffer);

    if( myGets(buffer,sizeof(buffer)) ==0  && esNumerica(buffer)){
    	retorno = 0;
    	*pResultado = atoi(buffer);

    }
    return retorno;
}

/**
 * \brief Verifica si la cadena ingresada es numerica
 * \param cadena Cadena de caracteres a ser analizada
 * \return Retorna 1 (vardadero) si la cadena es numerica y 0 (falso) si no lo es
 *
 */
static int esNumerica(char* cadena)
{
	int retorno = 1;
	int i = 0;

	if(cadena[0]=='-'){
		i = 1;
	}
	for ( i=0; cadena[i]!='\0';i++){

		if(cadena[i] >'9' || cadena[i]<'0' ){

			retorno = 0;
			break;
		}
	}

	return retorno;
}


/**
 * \brief Verifica si la cadena ingresada es flotante
 * \param pResultado Puntero al espacio de memoria donde se dejara el resultado de la funcion
 * \return Retorna 0 (EXITO) si se obtiene un numero flotante y -1 (ERROR) si no
 *
 */
static int getFloat(float* pResultado)
{
    int retorno=-1;

    return retorno;
}

/**
 * \brief Verifica si la cadena ingresada es flotante
 * \param cadena Cadena de caracteres a ser analizada
 * \return Retorna 1 (vardadero) si la cadena es flotante y 0 (falso) si no lo es
 *
 */
static int esFlotante(char* cadena)
{
	int retorno = 1;

	return retorno;
}

/**
 * \brief Solicita un numero flotante al usuario, luego de verificarlo devuelve el resultado
 * \param pResultado Puntero al espacio de memoria donde se dejara el resultado de la funcion
 * \param mensaje Es el mensaje a ser mostrado
 * \param mensajeError Es el mensaje de Error a ser mostrado
 * \param minimo Es el numero maximo a ser aceptado
 * \param maximo Es el minimo minimo a ser aceptado
 * \return Retorna 0 si se obtuvo el numero flotante y -1 si no
 *
 */
int utn_getNumeroFlotante(float* pResultado, char* mensaje, char* mensajeError, float minimo, float maximo, int reintentos)
{
	int retorno = -1;

	return retorno;
}

