/*
 * bibliotecaArrayPassenger.c
 *
 *  Created on: 13 may 2022
 *      Author: ludmi
 */
#include <stdio.h>
#include <stdlib.h>
#include "bibliotecaArrayPassenger.h"
#include "UTNBibliotecaTomaDeDatos.h"

/** \brief To indicate that all position in the array are empty,
* this function put the flag (isEmpty) in TRUE in all
* position of the array
* \param list Passenger* Pointer to array of passenger
* \param len int Array length
* \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
*
*/
int initPassengers(Passenger* list, int len)
{
	int retorno;
	retorno = -1;

	if (list != NULL && len > 0) {
		for (int i = 0; i < len; i++) {
			list[i].isEmpty = 1;
	 }
		retorno = 0;
	     }
       return retorno;
}
/** \brief add in a existing list of passengers the values received as parameters
* in the first empty position
* \param list passenger*
* \param len int
* \param id int
* \param name[] char
* \param lastName[] char
* \param price float
* \param typePassenger int
* \param flycode[] char
* \return int Return (-1) if Error [Invalid length or NULL pointer or without
free space] - (0) if Ok */

int addPassenger(Passenger* list, int len, int id, char name[],char
lastName[],float price,int typePassenger, char flycode[])
{
   int retorno;
   int indexLibre;
   Passenger bufferPassenger;

   retorno = -1;

      if(list!=NULL && len >0 && id < len && id >=0 ){
      indexLibre = buscarIndexPorIsEmpty(list,len);
        	if (indexLibre != -1) {

        		if(utn_getNombre(bufferPassenger.name,NAME_LEN,"\nIngrese su nombre \n","\nERROR en el ingreo",2) == 0 &&
        		   utn_getNombre(bufferPassenger.lastName,LASTNAME_LEN,"\nIngrese su nombre \n","\nERROR en el ingreo",2) == 0 &&
				   utn_getNumeroFlotante(&bufferPassenger.price,"\nIngrese su nombre \n","\nERROR en el ingreo",3829.000,0,3) == 0 &&
				  valorAlfanumerico(&bufferPassenger.typePassenger,20,"Ingrese un valor alfanumerico"))
		{

        		}


//        		//if(	utn_getNombre(bufferPantalla.nombre,NOMBRE_LEN,"\nNombre?\n","\nERROR\n",2) == 0 &&
//           if(utn_getNombre(BufferPassenger.name,NAME_LEN,"\n Ingrese su nombre\n","\nError en el ingreso \n",2) == 0 &&
//            utn_getNombre() == 0 &&
//			utn_getNumeroFlotante () == 0 && ){






	  retorno = 0;
	  }

   }

return retorno;
}
//pArray[indexLibre].idAsociado = incrementarId();
//pArray[indexLibre].isEmpty = 0;
//
//mostrarAsociado(pArray[indexLibre]);
//retorno = 0;

/** \brief find a Passenger by Id en returns the index position in array.
*
* \param list Passenger*
* \param len int
* \param id int
* \return Return passenger index position or (-1) if [Invalid length or
NULL pointer received or passenger not found]
*
*/
int findPassengerById(Passenger list[], int len,int id)
{
	int retorno;

	retorno = -1;

	if (list != NULL && len > 0 && id >=0 ) {
		retorno = 0;
		for (int i = 0; i < len; i++) {

			if( list[i].id == id ){

				retorno = i;
				break;
			}
		}
	}

       return retorno;
}


/** \brief Remove a Passenger by Id (put isEmpty Flag in 1)
*
* \param list Passenger*
* \param len int
* \param id int
* \return int Return (-1) if Error [Invalid length or NULL pointer or if can't
find a passenger] - (0) if Ok
*
*/
int removePassenger(Passenger* list, int len, int id)
{
	int retorno;
		int i;
		retorno = -1;

		if (list != NULL && len > 0 && id >=0  && list[i].isEmpty) {

			list[i].isEmpty = 1;
			retorno = 0;

		}

	       return retorno;
}


/** \brief print the content of passengers array
*
* \param list Passenger*
* \param length int
* \return int
*
*/
int printPassenger(Passenger* list, int length)
{
return 0;

}

/** \brief Sort the elements in the array of passengers, the argument order
indicate UP or DOWN order
*
* \param list Passenger*
* \param len int
* \param order int [1] indicate UP - [0] indicate DOWN
* * \return int Return (-1) if Error [Invalid length or NULL pointer] - (0) if Ok
*/
int sortPassengers(Passenger* list, int len, int order)
{
return 0;
}



int buscarIndexPorIsEmpty(Passenger* list, int len)
{
	int retorno = -1;

		if(list != NULL && len > 0)
		{
			for(int i = 0; i < len; i++)
			{
				if(list[i].isEmpty == 1)
				{
					retorno = i;
					break;
				}
			}
		}

	return retorno;
}
